/**
 * 
 */
package com.sabre.server;

import java.rmi.AccessException;
import java.rmi.AlreadyBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

/**
 * @author x0092516
 *
 */
public class FlightStorageServer {

	private static final int PORT = 1233;
	private FlightLegStorage flightLegStorage;
	private Registry registry;
	
	public FlightStorageServer() {
		
	}

	protected FlightLegStorage createFlightLegStorage() throws RemoteException
	{
		return new FlightLegStorage();
	}
	
	protected Registry getRegistry() throws RemoteException {
		return LocateRegistry.createRegistry(FlightStorageServer.PORT);
	}
	
	protected void rebindRegistry(String str, Remote remote) throws AccessException, RemoteException {
		registry.rebind(str, remote);
	}
	
	public void startServer() throws RemoteException
	{
		flightLegStorage = createFlightLegStorage();
		registry = getRegistry();
		 
		// rebind is used instead of bind because if it is already bound we always want to rebind it in this case
		rebindRegistry("FlightLegStorageServer", flightLegStorage);
        System.out.println("FlightLegStorage server running.");
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) throws RemoteException, AlreadyBoundException{
		/* The security manager allows the server to download classes that are
		 * not in our local classpath. This implementation does not use a Security manager because
		 * the server does not download any classes from remote locations
		 * */

        FlightStorageServer flightLegStorageServer = new FlightStorageServer();
        
        try {
        	flightLegStorageServer.startServer();
        } catch (Exception e) {
        	e.printStackTrace();
        }
	}
}
